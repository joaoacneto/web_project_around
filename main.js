!function(){"use strict";const e=new class{constructor({baseUrl:e,headers:t}){this.baseUrl=e,this.headers=t}getInitialCards(){return fetch(`${this.baseUrl}/cards`,{headers:this.headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}getInfo(){return fetch(`${this.baseUrl}/users/me`,{headers:this.headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}setInfo(e,t){return console.log(e,t),fetch(`${this.baseUrl}/users/me`,{method:"PATCH",headers:this.headers,body:JSON.stringify({name:e,about:t})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}addNewCard(e,t){return fetch(`${this.baseUrl}/cards`,{method:"POST",headers:this.headers,body:JSON.stringify({name:e,link:t})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}setLiked(e){return fetch(`${this.baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this.headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}setDisliked(e){return fetch(`${this.baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this.headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}deleteCard(e){return fetch(`${this.baseUrl}/cards/${e}`,{method:"DELETE",headers:this.headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}editAvatar(e){return fetch(`${this.baseUrl}/users/me/avatar`,{method:"PATCH",headers:this.headers,body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}}({baseUrl:"https://around-api.pt-br.tripleten-services.com/v1",headers:{authorization:"29bc26b9-99c7-44cc-b9cc-b9d2104c9ab6","Content-Type":"application/json"}});class t{constructor(e,t,s,n,r,o){this._name=e.name,this._link=e.link,this._isLiked=e.isLiked,this._id=e._id,this._owner=e.owner,this._template=document.querySelector(t).content.querySelector(".element"),this._handleCardClick=s,this._handleCardDelete=n,this._userId=r,this._handleCardLike=o}_createCardElement(){const e=this._template.cloneNode(!0),t=e.querySelector(".element__image"),s=e.querySelector(".element__title"),n=e.querySelector(".element__image-heart"),r=e.querySelector(".element__delete");return this._userId!==this._owner&&(r.style.display="none"),t.src=this._link,t.alt=this._name,s.textContent=this._name,this._isLiked&&n.classList.toggle("element__image-heart-liked"),this._setEventListeners(n,r,t),e}_handleHeartClick=e=>{e.target.classList.toggle("element__image-heart-liked"),this._handleCardLike(this._id,this._isLiked)};_handleTrashClick=e=>{this._handleCardDelete(e.target.closest(".element"),this._id)};_setEventListeners(e,t,s){e.addEventListener("click",this._handleHeartClick),t.addEventListener("click",this._handleTrashClick),s.addEventListener("click",(()=>this._handleCardClick(this._link,this._name)))}createCard(){return this._createCardElement()}}class s{constructor(e,t){this._config=e,this._formElement=t,this._inputList=Array.from(t.querySelectorAll(this._config.inputSelector)),this._buttonElement=t.querySelector(this._config.submitButtonSelector)}_showInputError(e,t){const s=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._config.inputErrorClass),s.textContent=t,s.classList.add(this._config.errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._config.inputErrorClass),t.classList.remove(this._config.errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._config.inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._config.inactiveButtonClass),this._buttonElement.disabled=!1)}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners(),this._toggleButtonState()}}class n{constructor({items:e,renderer:t},s){this._items=e,this._renderer=t,this._container=document.querySelector(s)}renderItems(){this._items.forEach((e=>this._renderer(e)))}addItem(e){this._container.prepend(e)}}class r{constructor(e){this._popup=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popup.classList.add("popup__opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("popup__opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popup.addEventListener("click",(e=>{console.log(e.target),(e.target.classList.contains("popup__opened")||e.target.classList.contains("popup__close"))&&this.close()}))}}class o extends r{constructor(e,t){super(e),this._handleFormSubmit=t,this._form=this._popup.querySelector(".popup__form"),this._inputList=Array.from(this._form.querySelectorAll(".popup__input"))}_getInputValues(){return this._inputValues={},this._inputList.forEach((e=>{this._inputValues[e.name]=e.value})),this._inputValues}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}close(){super.close(),this._form.reset()}open(){super.open()}}let i;e.getInfo().then((e=>{i=e._id,_.setUserInfo({name:e.name,job:e.about}),_.setUserAvatar({avatar:e.avatar})})).catch((e=>{console.log(e)}));const a=(t,s)=>{s?e.setDisliked(t).then((e=>{console.log(e)})):e.setLiked(t).then((e=>{console.log(e)}))},l=new class extends r{constructor(e,t){super(e),this._popup=document.querySelector(e),this._confirmationButton=document.querySelector(".popup__delete-card"),this._handleDeleteCard=t}setEventListeners(){super.setEventListeners(),this._confirmationButton.addEventListener("click",(()=>{this._handleDeleteCard(this._card,this._cardId)}))}open(e,t){this._card=e,this._cardId=t,super.open()}}("#delete-card",((t,s)=>{const n=document.querySelector("#temCerteza");n.textContent="Deletando...",e.deleteCard(s).then((()=>{t.remove(),l.close()})).finally((()=>{n.textContent="Sim"}))}));let c;l.setEventListeners(),e.getInitialCards().then((e=>{c=new n({items:e,renderer:e=>{const s=new t(e,"#card-template",u,((e,t)=>{l.open(e,t)}),i,((e,t)=>{a(e,t)})).createCard();c.addItem(s)}},".elements"),c.renderItems()})).catch((e=>{console.log(e)}));const d={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__save-button",inactiveButtonClass:"popup__save-button_disabled",inputErrorClass:"invalido",errorClass:"popup__msg-error"},h=new class extends r{open(e,t){const s=this._popup.querySelector(".image__popup-image"),n=this._popup.querySelector(".image__popup-subtitle");s.src=t,s.alt=e,n.textContent=e,super.open()}}(".image__popup");h.setEventListeners();const u=(e,t)=>{console.log("entrou"),h.open(t,e)};new s(d,document.querySelector(".popup__form")).enableValidation(),new s(d,document.querySelector(".add__form")).enableValidation(),new s(d,document.querySelector(".avatar__form")).enableValidation();const _=new class{constructor({nameSelector:e,jobSelector:t,avatarSelector:s}){this._nameElement=document.querySelector(e),this._jobElement=document.querySelector(t),this._avatarElement=document.querySelector(s)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent}}setUserInfo({name:e,job:t}){this._nameElement.textContent=e,this._jobElement.textContent=t}setUserAvatar({avatar:e}){this._avatarElement.src=e}}({nameSelector:".profile__content-name",jobSelector:".profile__content-job",avatarSelector:".profile__content-picture"}),p=new o("#edit-profile",(t=>{const s=document.querySelector("#btnEditProfile");s.textContent="Salvando...",console.log(t),e.setInfo(t.name,t.title).then((e=>{console.log(e),_.setUserInfo({name:e.name,job:e.about})})).catch((e=>{console.log(e)})).finally((()=>{s.textContent="Salvar"})),p.close()}));p.setEventListeners();const m=new o("#edit-avatar",(t=>{const s=document.querySelector("#btnEditAvatar");s.textContent="Salvando...",e.editAvatar(t.avatar).then((e=>{_.setUserAvatar({avatar:e.avatar})})).catch((e=>{console.log(e)})).finally((()=>{s.textContent="Salvar"})),m.close()}));m.setEventListeners(),document.querySelector(".profile__content-pencil").addEventListener("click",(()=>{m.open()}));const E=new o("#add-card",(s=>{const n=document.querySelector("#btnAddSubmit");n.textContent="Criando...",e.addNewCard(s.name,s.URL).then((e=>{const s=new t({name:e.name,link:e.link,isLiked:e.isLiked,owner:e.owner},"#card-template",u,((e,t)=>{l.open(e,t)}),i,((e,t)=>{a(e,t)}));c.addItem(s.createCard())})).finally((()=>{n.textContent="Criar"})),E.close()}));E.setEventListeners(),document.querySelector(".profile__content-edit").addEventListener("click",(()=>{const e=_.getUserInfo();document.querySelector(".popup__name-input").value=e.name,document.querySelector(".popup__title-input").value=e.job,p.open()})),document.querySelector(".profile__add-button").addEventListener("click",(()=>{E.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,